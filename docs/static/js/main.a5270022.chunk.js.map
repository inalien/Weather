{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["console","log","App","state","users","geoLocation","weather","forecast","latt1","geolatitude","geolongitude","geoUrl","fetch","then","response","json","setState","res","data","location","latitude","longitude","setTimeout","url","URL","params","lat","lon","Object","keys","forEach","key","searchParams","append","this","map","ip","type","city","current","temp","rain","description","feels_like","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oLAOAA,QAAQC,M,IAiGOC,E,kDA9Fb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,QAAS,GACTC,SAAU,GACVC,MAAO,GACPC,YAAa,IARH,E,gEAYO,IAWfA,EAMAC,EAjBc,OACZC,EAAS,gDAEfC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACR,GAAD,OAAiBL,QAAQC,IAAII,MAErCO,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACR,GAAD,OAAiB,EAAKW,SAAS,CAAEX,YAAa,CAACA,QAIvDO,MAAM,iDACHC,MAAK,SAACI,GAAD,OAASA,EAAIF,UAClBF,MAAK,SAACK,GAAD,OAAWT,EAAcS,EAAKC,SAASC,YAI/CR,MAAM,iDACHC,MAAK,SAACI,GAAD,OAASA,EAAIF,UAClBF,MAAK,SAACK,GAAD,OAAWR,EAAeQ,EAAKC,SAASE,aAGhDC,YAAW,WACT,IAAIC,EAAM,IAAIC,IACV,8HAEFC,EAAS,CAAEC,IAAI,GAAD,OAAKjB,GAAekB,IAAI,GAAD,OAAKjB,IAC5CkB,OAAOC,KAAKJ,GAAQK,SAAQ,SAACC,GAAD,OAC1BR,EAAIS,aAAaC,OAAOF,EAAKN,EAAOM,OAGtCnB,MAAMW,GACHV,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACP,GAAD,OAAaN,QAAQC,IAAI,CAACK,EAAQoB,SAE1Cd,MAAMW,GACHV,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACP,GAAD,OAAa,EAAKU,SAAS,CAAEV,QAAS,CAACA,UAC9C,Q,+BAIH,OACE,6BACE,2CACA,6BACG4B,KAAK/B,MAAME,YAAY8B,KAAI,SAAC9B,GAAD,OAC1B,yBAAK0B,IAAK1B,EAAY+B,IACpB,2BAAI/B,EAAY+B,IAChB,2BAAI/B,EAAYgC,MAChB,oCAAUhC,EAAYc,SAASmB,MAC/B,wCAAcjC,EAAYc,SAASC,UACnC,yCAAef,EAAYc,SAASE,gBAK1C,uCACA,6BACGa,KAAK/B,MAAMG,QAAQ6B,KAAI,SAAC7B,GAAD,OACtB,yBAAKyB,IAAKzB,EAAQoB,KAChB,2BACG,IADH,OAEM,8BAAOpB,EAAQoB,KAClBpB,EAAQoB,KAEX,oCAAUpB,EAAQqB,KAClB,4CAAkBrB,EAAQiC,QAAQC,MAClC,iDAAuBlC,EAAQiC,QAAQE,MAEvC,2CAAiBnC,EAAQiC,QAAQjC,QAAQoC,aACzC,kDAAwBpC,EAAQiC,QAAQI,sB,GAtFpCC,aCGEC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCENC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,a","file":"static/js/main.a5270022.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport const getData = async () =>\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\n    response.json()\n  );\n\nconsole.log();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      geoLocation: [],\n      weather: [],\n      forecast: [],\n      latt1: [],\n      geolatitude: [],\n    };\n  }\n\n  componentDidMount() {\n    const geoUrl = \"https://api.ipregistry.co/?key=ny56ten5lcezli\";\n\n    fetch(geoUrl)\n      .then((response) => response.json())\n      .then((geoLocation) => console.log(geoLocation));\n\n    fetch(geoUrl)\n      .then((response) => response.json())\n      .then((geoLocation) => this.setState({ geoLocation: [geoLocation] }));\n\n    var geolatitude;\n\n    fetch(\"https://api.ipregistry.co/?key=ny56ten5lcezli\")\n      .then((res) => res.json())\n      .then((data) => (geolatitude = data.location.latitude));\n\n    var geolongitude;\n\n    fetch(\"https://api.ipregistry.co/?key=ny56ten5lcezli\")\n      .then((res) => res.json())\n      .then((data) => (geolongitude = data.location.longitude));\n    // .then(() => console.log(geolongitude))\n\n    setTimeout(() => {\n      var url = new URL(\n          \"https://api.openweathermap.org/data/2.5/onecall?appid=4773648f9ce1cb4d44c44dc4320dc597&exclude=hourly,daily&units=imperial\"\n        ),\n        params = { lat: `${geolatitude}`, lon: `${geolongitude}` };\n      Object.keys(params).forEach((key) =>\n        url.searchParams.append(key, params[key])\n      );\n\n      fetch(url)\n        .then((response) => response.json())\n        .then((weather) => console.log([weather.lat]));\n\n      fetch(url)\n        .then((response) => response.json())\n        .then((weather) => this.setState({ weather: [weather] }));\n    }, 1500);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>geoLocation</h1>\n        <div>\n          {this.state.geoLocation.map((geoLocation) => (\n            <div key={geoLocation.ip}>\n              <p>{geoLocation.ip}</p>\n              <p>{geoLocation.type}</p>\n              <p>City: {geoLocation.location.city}</p>\n              <p>latitude: {geoLocation.location.latitude}</p>\n              <p>longitude: {geoLocation.location.longitude}</p>\n            </div>\n          ))}\n        </div>\n\n        <h1>Weather</h1>\n        <div>\n          {this.state.weather.map((weather) => (\n            <div key={weather.lat}>\n              <p>\n                {\" \"}\n                Lat <span>{weather.lat}</span>\n                {weather.lat}\n              </p>\n              <p>lon : {weather.lon}</p>\n              <p>currentTemp : {weather.current.temp}</p>\n              <p>currentWeatherId : {weather.current.rain}</p>\n              {/* <p>currentMain : {weather.current}</p> */}\n              <p>currentDes : {weather.current.weather.description}</p>\n              <p>currentFeels_like : {weather.current.feels_like}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import ReactDOM from \"react-dom\";\n// import './Assets/scss/style.scss'\n// import './index.css';\n// import App from './App.js';\n// import Location from \"../src/Components/Location/Location.jsx\";\n// import Location7 from \"../src/Components/Location/Location7.jsx\";\n// import Location8 from \"../src/Components/Location/Location8.jsx\";\n\n// import Weather1 from \"./Components/Weather/Weather1.jsx\"\n// import Forcast from \"./Components/Forecast/forecast.jsx\"\n// import HourlyForcast from \"./Components/Forecast/hourlyForecast.jsx\"\n\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <app\n//         <Location8 />\n//     <Location7 />\n//     <Weather1 />\n//     {/* <Forcast /> */}\n//     <HourlyForcast />\n\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}