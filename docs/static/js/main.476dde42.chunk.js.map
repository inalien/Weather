{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","users","geolocation","geolocation3","geolocation5","url_1","url_2","url_3","url_5","fetch","then","response","json","console","log","setState","results","this","map","key","ip","type","continent_name","country_code","country_name","region_code","region_name","city","zip","latitude","longitude","location","geoname_id","capital","languages","code","name","native","country_flag","country_flag_emoji_unicode","is_eu","lat","lon","id","address","geo","lng","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.476dde42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      geolocation: [],\n      geolocation3: [],\n      geolocation5: [],\n    };\n  }\n\n  componentDidMount() {\n    const url_1 = \"https://jsonplaceholder.typicode.com/users\";\n    const url_2 =\n      \"http://api.ipstack.com/check?access_key=486cb27f35c3e9ab5294f2fb62673b55\";\n    const url_3 = \"http://ip-api.com/json/24.48.0.1\";\n    const url_4 = \"http://ip-api.com/batch?fields=isp\";\n    const url_5 =\n      \"https://api.ipregistry.co/82.55.66.11,1.1.1.1,173.54.22.33?key=ny56ten5lcezli\";\n    fetch(url_1)\n      .then((response) => response.json())\n      .then((users) => console.log(users));\n\n    fetch(url_1)\n      .then((response) => response.json())\n      .then((users) => this.setState({ users: users }));\n\n    fetch(url_2)\n      .then((response) => response.json())\n      .then((geolocation) => console.log([geolocation]));\n\n    fetch(url_2)\n      .then((response) => response.json())\n      .then((geolocation) => this.setState({ geolocation: [geolocation] }));\n\n    fetch(url_3)\n      .then((response) => response.json())\n      .then((geolocation3) => console.log([geolocation3]));\n\n    fetch(url_3)\n      .then((response) => response.json())\n      .then((geolocation3) => this.setState({ geolocation3: [geolocation3] }));\n\n    fetch(url_5)\n      .then((response) => response.json())\n      .then((geolocation5) => console.log(geolocation5.results));\n\n    fetch(url_5)\n      .then((response) => response.json())\n      .then((geolocation5) =>\n        this.setState({ geolocation5: geolocation5.results })\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>geoLocation AKP URL 2</h1>\n        <div>\n          {this.state.geolocation.map((geolocation) => (\n            <div key={geolocation.ip}>\n              <p>{geolocation.ip}</p>\n              <p>{geolocation.type}</p>\n              <p>{geolocation.continent_name}</p>\n              <p>{geolocation.country_code}</p>\n              <p>{geolocation.country_name}</p>\n              <p>{geolocation.region_code}</p>\n              <p>{geolocation.region_name}</p>\n              <p>{geolocation.city}</p>\n              <p>{geolocation.zip}</p>\n              <p>{geolocation.latitude}</p>\n              <p>{geolocation.longitude}</p>\n              <p>{geolocation.location.geoname_id}</p>\n              <p>{geolocation.location.capital}</p>\n              <p>{geolocation.location.languages.code}</p>\n              <p>{geolocation.location.languages.name}</p>\n              <p>{geolocation.location.languages.native}</p>\n              <p>{geolocation.location.country_flag}</p>\n              <p>{geolocation.location.country_flag_emoji_unicode}</p>\n              <p>{geolocation.location.is_eu}</p>\n            </div>\n          ))}\n        </div>\n        <h1>Geo3</h1>\n        <div>\n          {this.state.geolocation3.map((geolocation3) => (\n            <div key={geolocation3.lat}>\n              <h1>\n                lat: {geolocation3.lat} lon: {geolocation3.lon}\n              </h1>\n            </div>\n          ))}\n        </div>\n        <h1>Users</h1>\n        <div>\n          {this.state.users.map((users) => (\n            <div key={users.id}>\n              <p>\n                {users.id} {users.name}\n                {\" // \"}\n                City: {users.address.city}\n                {\" // \"}\n                lat: {users.address.geo.lat}\n                {\" // \"}\n                lng: {users.address.geo.lng}\n              </p>\n            </div>\n          ))}\n        </div>\n        <h1>Users5</h1>\n        <div>\n          {this.state.geolocation5.map((geolocation5) => (\n            <div key={geolocation5.ip}>\n              <p>{geolocation5.ip}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import ReactDOM from \"react-dom\";\n// import './Assets/scss/style.scss'\n// import './index.css';\n// import App from './App.js';\n// import Location from \"../src/Components/Location/Location.jsx\";\n// import Location7 from \"../src/Components/Location/Location7.jsx\";\n// import Location8 from \"../src/Components/Location/Location8.jsx\";\n\n// import Weather1 from \"./Components/Weather/Weather1.jsx\"\n// import Forcast from \"./Components/Forecast/forecast.jsx\"\n// import HourlyForcast from \"./Components/Forecast/hourlyForecast.jsx\"\n\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <app\n//         <Location8 />\n//     <Location7 />\n//     <Weather1 />\n//     {/* <Forcast /> */}\n//     <HourlyForcast />\n\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}